use winit::event::MouseButton;
use crate::engine::core::key_codes::KeyCode;
use crate::engine::core::mouse_codes::MouseCode;

pub type WinitKeyCode = winit::keyboard::KeyCode;

/// conversion between the engine's KeyCode and Winit's KeyCode.
impl TryInto<KeyCode> for WinitKeyCode {
    type Error = String;

    fn try_into(self) -> Result<KeyCode, Self::Error> {
        match self {
            WinitKeyCode::Space => Ok(KeyCode::Space),
            WinitKeyCode::Quote => Ok(KeyCode::Apostrophe),
            WinitKeyCode::Comma => Ok(KeyCode::Comma),
            WinitKeyCode::Minus => Ok(KeyCode::Minus),
            WinitKeyCode::Period => Ok(KeyCode::Period),
            WinitKeyCode::Slash => Ok(KeyCode::Slash),
            WinitKeyCode::Digit0 => Ok(KeyCode::D0),
            WinitKeyCode::Digit1 => Ok(KeyCode::D1),
            WinitKeyCode::Digit2 => Ok(KeyCode::D2),
            WinitKeyCode::Digit3 => Ok(KeyCode::D3),
            WinitKeyCode::Digit4 => Ok(KeyCode::D4),
            WinitKeyCode::Digit5 => Ok(KeyCode::D5),
            WinitKeyCode::Digit6 => Ok(KeyCode::D6),
            WinitKeyCode::Digit7 => Ok(KeyCode::D7),
            WinitKeyCode::Digit8 => Ok(KeyCode::D8),
            WinitKeyCode::Digit9 => Ok(KeyCode::D9),
            WinitKeyCode::Semicolon => Ok(KeyCode::Semicolon),
            WinitKeyCode::Equal => Ok(KeyCode::Equal),
            WinitKeyCode::KeyA => Ok(KeyCode::A),
            WinitKeyCode::KeyB => Ok(KeyCode::B),
            WinitKeyCode::KeyC => Ok(KeyCode::C),
            WinitKeyCode::KeyD => Ok(KeyCode::D),
            WinitKeyCode::KeyE => Ok(KeyCode::E),
            WinitKeyCode::KeyF => Ok(KeyCode::F),
            WinitKeyCode::KeyG => Ok(KeyCode::G),
            WinitKeyCode::KeyH => Ok(KeyCode::H),
            WinitKeyCode::KeyI => Ok(KeyCode::I),
            WinitKeyCode::KeyJ => Ok(KeyCode::J),
            WinitKeyCode::KeyK => Ok(KeyCode::K),
            WinitKeyCode::KeyL => Ok(KeyCode::L),
            WinitKeyCode::KeyM => Ok(KeyCode::M),
            WinitKeyCode::KeyN => Ok(KeyCode::N),
            WinitKeyCode::KeyO => Ok(KeyCode::O),
            WinitKeyCode::KeyP => Ok(KeyCode::P),
            WinitKeyCode::KeyQ => Ok(KeyCode::Q),
            WinitKeyCode::KeyR => Ok(KeyCode::R),
            WinitKeyCode::KeyS => Ok(KeyCode::S),
            WinitKeyCode::KeyT => Ok(KeyCode::T),
            WinitKeyCode::KeyU => Ok(KeyCode::U),
            WinitKeyCode::KeyV => Ok(KeyCode::V),
            WinitKeyCode::KeyW => Ok(KeyCode::W),
            WinitKeyCode::KeyX => Ok(KeyCode::X),
            WinitKeyCode::KeyY => Ok(KeyCode::Y),
            WinitKeyCode::KeyZ => Ok(KeyCode::Z),
            WinitKeyCode::BracketLeft => Ok(KeyCode::LeftBracket),
            WinitKeyCode::Backslash => Ok(KeyCode::Backslash),
            WinitKeyCode::BracketRight => Ok(KeyCode::RightBracket),
            WinitKeyCode::Backquote => Ok(KeyCode::GraveAccent),
            WinitKeyCode::Escape => Ok(KeyCode::Escape),
            WinitKeyCode::Enter => Ok(KeyCode::Enter),
            WinitKeyCode::Tab => Ok(KeyCode::Tab),
            WinitKeyCode::Backspace => Ok(KeyCode::Backspace),
            WinitKeyCode::Insert => Ok(KeyCode::Insert),
            WinitKeyCode::Delete => Ok(KeyCode::Delete),
            WinitKeyCode::ArrowRight => Ok(KeyCode::Right),
            WinitKeyCode::ArrowLeft => Ok(KeyCode::Left),
            WinitKeyCode::ArrowDown => Ok(KeyCode::Down),
            WinitKeyCode::ArrowUp => Ok(KeyCode::Up),
            WinitKeyCode::PageUp => Ok(KeyCode::PageUp),
            WinitKeyCode::PageDown => Ok(KeyCode::PageDown),
            WinitKeyCode::Home => Ok(KeyCode::Home),
            WinitKeyCode::End => Ok(KeyCode::End),
            WinitKeyCode::CapsLock => Ok(KeyCode::CapsLock),
            WinitKeyCode::ScrollLock => Ok(KeyCode::ScrollLock),
            WinitKeyCode::NumLock => Ok(KeyCode::NumLock),
            WinitKeyCode::PrintScreen => Ok(KeyCode::PrintScreen),
            WinitKeyCode::Pause => Ok(KeyCode::Pause),
            WinitKeyCode::F1 => Ok(KeyCode::F1),
            WinitKeyCode::F2 => Ok(KeyCode::F2),
            WinitKeyCode::F3 => Ok(KeyCode::F3),
            WinitKeyCode::F4 => Ok(KeyCode::F4),
            WinitKeyCode::F5 => Ok(KeyCode::F5),
            WinitKeyCode::F6 => Ok(KeyCode::F6),
            WinitKeyCode::F7 => Ok(KeyCode::F7),
            WinitKeyCode::F8 => Ok(KeyCode::F8),
            WinitKeyCode::F9 => Ok(KeyCode::F9),
            WinitKeyCode::F10 => Ok(KeyCode::F10),
            WinitKeyCode::F11 => Ok(KeyCode::F11),
            WinitKeyCode::F12 => Ok(KeyCode::F12),
            WinitKeyCode::F13 => Ok(KeyCode::F13),
            WinitKeyCode::F14 => Ok(KeyCode::F14),
            WinitKeyCode::F15 => Ok(KeyCode::F15),
            WinitKeyCode::F16 => Ok(KeyCode::F16),
            WinitKeyCode::F17 => Ok(KeyCode::F17),
            WinitKeyCode::F18 => Ok(KeyCode::F18),
            WinitKeyCode::F19 => Ok(KeyCode::F19),
            WinitKeyCode::F20 => Ok(KeyCode::F20),
            WinitKeyCode::F21 => Ok(KeyCode::F21),
            WinitKeyCode::F22 => Ok(KeyCode::F22),
            WinitKeyCode::F23 => Ok(KeyCode::F23),
            WinitKeyCode::F24 => Ok(KeyCode::F24),
            WinitKeyCode::F25 => Ok(KeyCode::F25),
            WinitKeyCode::Numpad0 => Ok(KeyCode::KP0),
            WinitKeyCode::Numpad1 => Ok(KeyCode::KP1),
            WinitKeyCode::Numpad2 => Ok(KeyCode::KP2),
            WinitKeyCode::Numpad3 => Ok(KeyCode::KP3),
            WinitKeyCode::Numpad4 => Ok(KeyCode::KP4),
            WinitKeyCode::Numpad5 => Ok(KeyCode::KP5),
            WinitKeyCode::Numpad6 => Ok(KeyCode::KP6),
            WinitKeyCode::Numpad7 => Ok(KeyCode::KP7),
            WinitKeyCode::Numpad8 => Ok(KeyCode::KP8),
            WinitKeyCode::Numpad9 => Ok(KeyCode::KP9),
            WinitKeyCode::NumpadDecimal => Ok(KeyCode::KPDecimal),
            WinitKeyCode::NumpadDivide => Ok(KeyCode::KPDivide),
            WinitKeyCode::NumpadMultiply => Ok(KeyCode::KPMultiply),
            WinitKeyCode::NumpadSubtract => Ok(KeyCode::KPSubtract),
            WinitKeyCode::NumpadAdd => Ok(KeyCode::KPAdd),
            WinitKeyCode::NumpadEnter => Ok(KeyCode::KPEnter),
            WinitKeyCode::NumpadEqual => Ok(KeyCode::KPEqual),
            WinitKeyCode::ShiftLeft => Ok(KeyCode::LeftShift),
            WinitKeyCode::ControlLeft => Ok(KeyCode::LeftControl),
            WinitKeyCode::AltLeft => Ok(KeyCode::LeftAlt),
            WinitKeyCode::SuperLeft => Ok(KeyCode::LeftSuper),
            WinitKeyCode::ShiftRight => Ok(KeyCode::RightShift),
            WinitKeyCode::ControlRight => Ok(KeyCode::RightControl),
            WinitKeyCode::AltRight => Ok(KeyCode::RightAlt),
            WinitKeyCode::SuperRight => Ok(KeyCode::RightSuper),
            WinitKeyCode::ContextMenu => Ok(KeyCode::Menu),
            _ => Err("Unmapped key code".to_string()),
        }
    }
}

impl TryInto<MouseCode> for MouseButton {
    type Error = &'static str;

    fn try_into(self) -> Result<MouseCode, Self::Error> {
        match self {
            MouseButton::Left => Ok(MouseCode::ButtonLeft),
            MouseButton::Right => Ok(MouseCode::ButtonRight),
            MouseButton::Middle => Ok(MouseCode::ButtonMiddle),
            MouseButton::Back => Ok(MouseCode::ButtonBack),
            MouseButton::Forward => Ok(MouseCode::ButtonForward),
            _ => Err("Unmapped mouse button")
        }
    }
}